{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","hours","minutes","seconds","time","setTime","totalTime","setTotalTime","start","setStart","disabled","setDisabled","circumference","Math","PI","circleOffset","setCircleOffset","handleInput","name","event","input","parseInt","target","value","isNaN","stopTimer","resetTimer","useEffect","timer","setInterval","alert","sec","min","hr","clearInterval","className","type","id","onChange","onClick","icon","faPlay","faPause","faUndo","width","height","stroke","strokeWidth","fill","r","cx","cy","strokeDasharray","strokeDashoffset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae2ebf6f.chunk.js","sourcesContent":["import { faPause, faPlay, faUndo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [time, setTime] = useState({\n    hours: 0,\n    minutes: 25,\n    seconds: 0,\n  });\n  const [totalTime, setTotalTime] = useState(0);\n  const [start, setStart] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n\n  const { hours, minutes, seconds } = time;\n\n  const circumference = 142 * 2 * Math.PI;\n\n  const [circleOffset, setCircleOffset] = useState(0);\n\n  const setProgress = (percent) => {\n    setCircleOffset(circumference - (percent / 100) * circumference);\n  };\n\n  const handleInput = (name) => (event) => {\n    const input = parseInt(event.target.value || 0);\n    if (!isNaN(input) && input <= 60 && input >= 0)\n      setTime({ ...time, [name]: input });\n  };\n\n  const startTimer = () => {\n    setStart(true);\n    setDisabled(true);\n    setTotalTime(hours * 24 + minutes * 60 + seconds);\n  };\n\n  const stopTimer = () => {\n    setStart(false);\n    setDisabled(false);\n  };\n\n  const resetTimer = () => {\n    stopTimer();\n    setTime({ ...time, hours: 0, minutes: 0, seconds: 0 });\n    setCircleOffset(0);\n  };\n\n  useEffect(() => {\n    const decrementFunction = () => {\n      if (seconds === 0 && minutes === 0 && hours === 0) {\n        alert(\"Time's UP!\");\n        return resetTimer();\n      }\n\n      let sec = seconds - 1;\n      let min = sec < 0 ? minutes - 1 : minutes;\n      let hr = min < 0 ? hours - 1 : hours;\n\n      if (sec < 0) sec = 60;\n\n      if (min < 0) min = 60;\n\n      if (hr < 0) hr = 24;\n\n      const elapsedTime = hr * 24 + min * 60 + sec;\n      setProgress((elapsedTime / totalTime) * 100);\n\n      setTime({ ...time, hours: hr, minutes: min, seconds: sec });\n    };\n\n    let timer;\n\n    if (start) {\n      timer = setInterval(decrementFunction, 1000);\n    } else {\n      clearInterval(timer);\n    }\n\n    return () => {\n      clearInterval(timer);\n    };\n  });\n\n  return (\n    <div className=\"container\">\n      <div className=\"time-container\">\n        <div className=\"time-wrapper\">\n          <input\n            type=\"text\"\n            id=\"hours\"\n            value={hours}\n            onChange={handleInput(\"hours\")}\n            disabled={disabled}\n          />\n          <span className=\"time-label\">H</span>\n          <input\n            type=\"text\"\n            id=\"minutes\"\n            value={minutes}\n            onChange={handleInput(\"minutes\")}\n            disabled={disabled}\n          />\n          <span className=\"time-label\">M</span>\n          <input\n            type=\"text\"\n            id=\"seconds\"\n            value={seconds}\n            onChange={handleInput(\"seconds\")}\n            disabled={disabled}\n          />\n          <span className=\"time-label\">S</span>\n        </div>\n        <div className=\"time-controllers\">\n          <button onClick={startTimer}>\n            <FontAwesomeIcon icon={faPlay} />\n          </button>\n          <button onClick={stopTimer}>\n            <FontAwesomeIcon icon={faPause} />\n          </button>\n          <button onClick={resetTimer}>\n            <FontAwesomeIcon icon={faUndo} />\n          </button>\n        </div>\n        <svg className=\"progress-ring\" width=\"300\" height=\"300\">\n          <circle\n            className=\"progress-ring__circle\"\n            stroke=\"black\"\n            strokeWidth=\"4\"\n            fill=\"transparent\"\n            r=\"142\"\n            cx=\"150\"\n            cy=\"150\"\n            strokeDasharray={`${circumference} ${circumference}`}\n            strokeDashoffset={circleOffset}\n          />\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}